package flat/async

class {
  public static async all<Out>(Object[] promises) -> Out[] {
    let array = Array<Out>(promises.count)

    native var Out data

    external {
      const result = await Promise.all(#{promises.data});

      result.forEach((entry) => {
        #{data} = entry;
        #{array.add(data)};
      });
    }

    return array
  }

  public static async all<Out>(
    Object[] values,
    async toPromise(Object, Int) -> Out,
    Int maxParallel = -1,
    async onAfterChunk(Int count) = {}
  ) -> Out[] {
    let array = Array<Out>(values.count)

    native var Object input
    native var Out data
    native var Int localIndex

    var Int step = maxParallel

    if (maxParallel <= 0) {
      step = values.count
    }

    for (var Int i = 0; i < values.count; i += step) {
      var Int count

      external {
        let promises = #{values.data}
          .slice(#{i}, #{i} + #{step})
          .map((obj, index) => {
            #{input} = obj;
            #{localIndex} = index;

            return #{toPromise(input, i + localIndex)$};
          });

        #{count} = promises.length;

        const result = await Promise.all(promises);

        result.forEach((entry) => {
          #{data} = entry;
          #{array.add(data)};
        });
      }

      onAfterChunk(count)
    }

    return array
  }
}