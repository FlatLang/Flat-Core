package flat/exception

class Exception {
  visible StackTrace stackTrace = StackTrace()

  public construct(visible String message = "") {
    external js {
      this.error = Error(#{message.chars.data});
    }
  }

  public toString() => this.class.name + (message ? ": #message" : "")

  [Target c]
  public onThrown(Bool soft) {
    external c {
      // if (#{stackTrace}->context == 0) {
        // #{stackTrace}->context = nova_get_context();
      // }
    }
  }

  [Target not c]
  public onThrown(Bool soft) {

  }

  [Target not js]
  public static catchType(func(), Class exceptionType, Bool soft = false, Bool exact = false) -> Exception => null {
    if (soft) {
      try {
        func()
      } catch all (Exception e) {
        if (exact ? e.class == exceptionType : e.class.isOfType(exceptionType)) {
          return e
        }
      }
    } else {
      try {
        func()
      } catch (Exception e) {
        if (exact ? e.class == exceptionType : e.class.isOfType(exceptionType)) {
          return e
        }
      }
    }
  }

  [Target js]
  public static catchType(func(), Class exceptionType, Bool soft = false, Bool exact = false) -> Exception => null {
    if (soft) {
      try {
        func()
      } catch all (Exception e) {
        if (e.class.location == exceptionType.location) {
          return e
        }
      }
    } else {
      try {
        func()
      } catch (Exception e) {
        if (e.class.location == exceptionType.location) {
          return e
        }
      }
    }
  }
}