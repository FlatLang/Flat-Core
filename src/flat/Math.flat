package flat

import math.h

[AutoFinal]
class Math {
  [Target c] external long llabs(long number) as extAbs
  [Target c] external double fabs(double number) as extFabs
  [Target c] external double sqrt(double number) as extSqrt
  [Target c] external double pow(double base, double power) as extPow
  [Target c] external double sin(double number) as extSin
  [Target c] external double cos(double number) as extCos
  [Target c] external double tan(double number) as extTan
  [Target c] external double asin(double number) as extAsin
  [Target c] external double acos(double number) as extAcos
  [Target c] external double atan(double number) as extAtan
  [Target c] external long floor(double number) as extFloor
  [Target c] external long ceil(double number) as extCeil

  [Target not c] external long Math.abs(long number) as extAbs
  [Target not c] external double Math.abs(double number) as extFabs
  [Target not c] external double Math.sqrt(double number) as extSqrt
  [Target not c] external double Math.pow(double base, double power) as extPow
  [Target not c] external double Math.sin(double number) as extSin
  [Target not c] external double Math.cos(double number) as extCos
  [Target not c] external double Math.tan(double number) as extTan
  [Target not c] external double Math.asin(double number) as extAsin
  [Target not c] external double Math.acos(double number) as extAcos
  [Target not c] external double Math.atan(double number) as extAtan
  [Target not c] external long Math.floor(double number) as extFloor
  [Target not c] external long Math.ceil(double number) as extCeil

  external long rand() as extRand

  visible static Double PI = 3.141592653

  public static max(Long a, Long b) => a > b ? a : b
  public static max(Int a, Int b) => a > b ? a : b
  public static min(Long a, Long b) => a < b ? a : b
  public static min(Int a, Int b) => a < b ? a : b
  public static sign(Long num) => num > 0 ? 1 : (num < 0 ? -1 : 0)
  public static random(Long range) => extRand() % range
  public static random(Int range) => extRand() % range
  public static abs(Long number) => number < 0 ? -number : number
  public static abs(Int number) => number < 0 ? -number : number
  public static abs(Double number) => number < 0 ? -number : number
  public static sqrt(Double number) => extSqrt(number)
  public static pow(Double base, Double power) => extPow(base, power)
  public static sin(Double number) => extSin(number)
  public static cos(Double number) => extCos(number)
  public static tan(Double number) => extTan(number)
  public static asin(Double number) => extAsin(number)
  public static acos(Double number) => extAcos(number)
  public static atan(Double number) => extAtan(number)
  public static round(Double number) => floor(number + 0.5)
  [Target not js] public static floor(Double number) => (Long)(number < 0 && (Long)number != number ? number - 1 : number)
  [Target js] public static floor(Double number) => extFloor(number)
  [Target not js] public static ceil(Double number) => (Long)(number >= 0 && (Long)number != number ? number + 1 : number)
  [Target js] public static ceil(Double number) => extCeil(number)
  public static gcd(Int a, Int b) -> Int {
    let r = a % b

    if (r == 0) {
      return b
    } else {
      return gcd(b, r)
    }
  }
}