package flat/primitive/number

import flat/datastruct/Comparable
import flat/operators/EqualsOperator
import flat/operators/MultiplyOperator
import flat/operators/MultiplyEqualsOperator

class Int extends Number implements Integer {
  public Long hashCodeLong => value

  visible static Int MAX_VALUE =  2147483647
  visible static Int MIN_VALUE = -2147483648

  public Double realValue => (Double)value
  public Long integerValue => value

  public construct(public Int value) {}

  public compareTo(Number other) => other.compareToInteger(value)
  public compareToReal(Double other) => this.value - other
  public compareToInteger(Long other) => this.value - other

  public static compareTo(Int value, Number other) => other.compareToInteger(value)
  public static compareToReal(Int value, Double other) => value - other
  public static compareToInteger(Int value, Long other) => value - other

  public plus(Number other) => other.plusInteger(value)
  public plusReal(Double other) => this.value + other
  public plusInteger(Long other) => this.value + other

  public plusEquals(Number other) => other.plusEqualsInteger(value)
  public plusEqualsReal(Double other) => this.value += other
  public plusEqualsInteger(Long other) => this.value += other

  public minus(Number other) => other.minusInteger(value)
  public minusReal(Double other) => this.value - other
  public minusInteger(Long other) => this.value - other

  public minusEquals(Number other) => other.minusEqualsInteger(value)
  public minusEqualsReal(Double other) => this.value -= other
  public minusEqualsInteger(Long other) => this.value -= other

  public multiply(Number other) => other.multiplyReal(value)
  public multiply(Object other) => other && other.class.isOfType(Number.class) && (Int)other * value
  public multiplyReal(Double other) => this.value * other
  public multiplyInteger(Long other) => this.value * other

  public multiplyEquals(Number other) => other.multiplyEqualsInteger(value)
  public multiplyEqualsReal(Double other) => this.value *= other
  public multiplyEqualsInteger(Long other) => this.value *= other

  public equals(Object other) => (other || !this) && other.class.isOfType(Number.class) && (Int)other == value
  public equalsReal(Double other) => this.value == other
  public equalsInteger(Long other) => this.value == other

  public static equals(Int value, Number other) => other.equalsInteger(value)
  public static equalsReal(Int value, Double other) => value == other
  public static equalsInteger(Int value, Long other) => value == other

  public toString() => toString(value)

  public static numDigits(Int number) => Long.numDigits(number)
  public static toString(Int value) => Long.toString(value)
  public static toJson(Int value) => toString(value)
  public static hashCodeLong(Int value) => Math.abs(value)
  public static plus(Int a, Long b) => a + b
  public static compareTo(Int a, Int b) => a - b
}