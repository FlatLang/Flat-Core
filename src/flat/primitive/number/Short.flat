package flat/primitive/number

import flat/datastruct
import flat/operators

class extends Number<Short> implements Integer {
  public Double realValue => (Double)value
  public Long integerValue => value

  public construct(public Short value) {}

  public compareTo(Short other) => this.value - other
  public compareToReal(Double other) => this.value - other
  public compareToInteger(Long other) => this.value - other

  public static compareToReal(Short value, Double other) => value - other
  public static compareToInteger(Short value, Long other) => value - other

  public plus(Short other) => this.value + other
  public plusReal(Double other) => this.value + other
  public plusInteger(Long other) => this.value + other

  public plusEquals(Short other) => this.value += other
  public plusEqualsReal(Double other) => this.value += other
  public plusEqualsInteger(Long other) => this.value += other

  public minus(Short other) => this.value - other
  public minusReal(Double other) => this.value - other
  public minusInteger(Long other) => this.value - other

  public minusEquals(Short other) => this.value -= other
  public minusEqualsReal(Double other) => this.value -= other
  public minusEqualsInteger(Long other) => this.value -= other

  public multiply(Short other) => this.value * other
  public multiplyReal(Double other) => this.value * other
  public multiplyInteger(Long other) => this.value * other

  public multiplyEquals(Short other) => this.value *= other
  public multiplyEqualsReal(Double other) => this.value *= other
  public multiplyEqualsInteger(Long other) => this.value *= other

  public equals(Object other) => (other || !this) && other.class.isOfType(Number.class) && (Short)other == value
  public equals(Short other) => this.value == other
  public equalsReal(Double other) => this.value == other
  public equalsInteger(Long other) => this.value == other

  public static equals(Short value, Short other) => value == other
  public static equalsReal(Short value, Double other) => value == other
  public static equalsInteger(Short value, Long other) => value == other

  public toString() => toString(value)

  public static numDigits(Short number) => Long.numDigits(number)
  public static toString(Short value) => Long.toString(value)
  public static toJson(Short value) => toString(value)
  public static hashCodeLong(Short value) => Math.abs(value)
  public static plus(Short a, Long b) => a + b
}