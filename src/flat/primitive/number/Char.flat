package flat/primitive/number

import flat/datastruct/Comparable
import flat/operators/EqualsOperator
import flat/operators/MultiplyOperator
import flat/operators/MultiplyEqualsOperator

class Char extends Number implements Integer {
  public Double realValue => (Double)value
  public Long integerValue => value

  public Bool isNumber => isNumber(value)
  public Bool isWhitespace => isWhitespace(value)

  public construct(public Char value) {}

  public static toLowerCase(Char c) -> Char => c {
    Int id = (Int)c

    if (id >= 65 && id <= 90) {
      return (Char)(id + 32)
    }
  }

  public static toUpperCase(Char c) -> Char => c {
    Int id = (Int)c

    if (id >= 97 && id <= 122) {
      return (Char)(id - 32)
    }
  }

  public repeat(Int times) => repeat(value, times)
  public static repeat(Char value, Int times) => "#value".repeat(times)

  public toLowerCase() => toLowerCase(value)
  public toUpperCase() => toUpperCase(value)

  public compareTo(Number other) => other.compareToInteger(value)
  public compareToReal(Double other) => this.value - other
  public compareToInteger(Long other) => this.value - other

  public static compareTo(Char value, Number other) => other.compareToInteger(value)
  public static compareToReal(Char value, Double other) => value - other
  public static compareToInteger(Char value, Long other) => value - other

  public multiply(Number other) => other.multiplyReal(value)
  public multiply(Object other) => other && other.class.isOfType(Number.class) && (Char)other * value
  public multiplyReal(Double other) => this.value * other
  public multiplyInteger(Long other) => this.value * other

  public plus(Number other) => other.plusInteger(value)
  public plusReal(Double other) => this.value + other
  public plusInteger(Long other) => this.value + other

  public plusEquals(Number other) => other.plusEqualsInteger(value)
  public plusEqualsReal(Double other) => this.value += other
  public plusEqualsInteger(Long other) => this.value += other

  public minus(Number other) => other.minusInteger(value)
  public minusReal(Double other) => this.value - other
  public minusInteger(Long other) => this.value - other

  public minusEquals(Number other) => other.minusEqualsInteger(value)
  public minusEqualsReal(Double other) => this.value -= other
  public minusEqualsInteger(Long other) => this.value -= other

  public multiplyEquals(Number other) => other.multiplyEqualsInteger(value)
  public multiplyEqualsReal(Double other) => this.value *= other
  public multiplyEqualsInteger(Long other) => this.value *= other

  public equals(Object other) => (other || !this) && other.class.isOfType(Number.class) && (Char)other == value
  public equalsReal(Double other) => this.value == other
  public equalsInteger(Long other) => this.value == other

  public static equals(Char value, Number other) => other.equalsInteger(value)
  public static equalsReal(Char value, Double other) => value == other
  public static equalsInteger(Char value, Long other) => value == other

  public static isNumber(Char value) -> Bool {
    let char = (Int)value

    return char >= (Int)'0' && char <= (Int)'9'
  }

  public static isWhitespace(Char value) => false {
    switch value {
      ' ' => fallthrough
      '\t' => fallthrough
      '\r' => fallthrough
      '\n' => return true
    }
  }

  public toString() => toString(value)

  public static toString(Char c) => String(c)
  public static toJson(Char c) => toString(c)
  public static hashCodeLong(Char value) => Math.abs(value)
  public static plus(Char a, Long b) => a + b
}