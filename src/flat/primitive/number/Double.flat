package flat/primitive/number

import flat/datastruct
import flat/operators

class extends Number implements RealNumber {
  public Double realValue => value
  public Long integerValue => (Long)value

  public construct(public Double value) {}

  public static numDigits(Double number) -> Int {
    var Int size = number < 0 ? 2 : 1

    number /= 10

    while (number > 0) {
      number /= 10

      size++
    }

    return size
  }

  public static toJson(Double value) => toString(value)

  public withinTolerance(Double target, Double tolerance) =>
    withinTolerance(value, target, tolerance)

  public static withinTolerance(Double value, Double target, Double tolerance = 0.00000001) =>
    (value - target) < tolerance && (value - target) > -tolerance

  public compareTo(Number other) => other.compareToReal(value)
  public compareToReal(Double other) => this.value - other
  public compareToInteger(Long other) => this.value - other

  public static compareTo(Double value, Number other) => other.compareToReal(value)
  public static compareToReal(Double value, Double other) => value - other
  public static compareToInteger(Double value, Long other) => value - other

  public plus(Number other) => other.plusReal(value)
  public plusReal(Double other) => this.value + other
  public plusInteger(Long other) => this.value + other

  public plusEquals(Number other) => other.plusEqualsReal(value)
  public plusEqualsReal(Double other) => this.value += other
  public plusEqualsInteger(Long other) => this.value += other

  public minus(Number other) => other.minusReal(value)
  public minusReal(Double other) => this.value - other
  public minusInteger(Long other) => this.value - other

  public minusEquals(Number other) => other.minusEqualsReal(value)
  public minusEqualsReal(Double other) => this.value -= other
  public minusEqualsInteger(Long other) => this.value -= other

  public multiply(Number other) => other.multiplyReal(value)
  public multiply(Object other) -> Double {
    if (!other || !other.class.isOfType(Number.class)) return 0
    return (Double)other * value
  }
  public multiplyReal(Double other) => this.value * other
  public multiplyInteger(Long other) => this.value * other

  public multiplyEquals(Number other) => other.multiplyEqualsReal(value)
  public multiplyEqualsReal(Double other) => this.value *= other
  public multiplyEqualsInteger(Long other) => this.value *= other

  public equals(Object other) => (other || !this) && other.class.isOfType(Number.class) && (Byte)other == value
  public equalsReal(Double other) => this.value == other
  public equalsInteger(Long other) => this.value == other

  public static equals(Double value, Number other) => other.equalsReal(value)
  public static equalsReal(Double value, Double other) => value == other
  public static equalsInteger(Double value, Long other) => value == other

  public toString() => toString(value)
  public static hashCodeLong(Double value) => Math.abs((Long)value)
  public static plus(Double a, Double b) => a + b
  public static compareTo(Double a, Double b) => a - b
}