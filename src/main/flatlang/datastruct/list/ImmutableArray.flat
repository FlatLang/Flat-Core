package "flatlang/datastruct/list"

import "flatlang/primitive/number/Integer"

//[Mutable "Array"]
[AutoFinal]
immutable class ImmutableArray<E> implements List<E> {
    E[] array

    visible pure Int count <=> count

    visible pure Bool empty => count == 0

    [Override] visible pure ImmutableArrayIterator<E> iterator => new ImmutableArrayIterator(this)

    [Override] public pure E first <=> array.first
    [Override] public pure E last <=> array.last

    pure this[Int index] => array[index]

    public construct() => this(new E[])
    public construct(E[] array) => this(array, true)
    public construct(native E[] array, Int count) => this(new Array<E>(array, count), false)

    construct(E[] array, Bool clone) {
        this.array = clone ? array.clone() : array
        this.count = array.count
    }

    public pure indexOf(E element) => array.indexOf(element)

    [Override] public map<Out>(mapFunc(E, Int, Array<E>) -> Out) => new ImmutableArray(array.map(mapFunc), false)
    [Override] public forEach(func(E, Int, Array<E>)) => array.forEach(func)
    [Override] public filter(filterFunc(E, Int, Array<E>) -> Bool) => new ImmutableArray(array.filter(filterFunc), false)
    [Override] public pure toArray() => toMutable()
    [Override] public pure take(Int howMany) => new ImmutableArray(array.take(howMany), false)
    [Override] public pure skip(Int howMany) => new ImmutableArray(array.skip(howMany), false)
    [Override] public pure reverse() => new ImmutableArray(array.reverse(), false)
    [Override] public pure toString() => "ImmutableArray [#{join(", ")}]"

    public add(E element) -> ImmutableArray<E> {
        array.add(element)

        return new ImmutableArray(array, false)
    }

    public add(Int index, E element) -> ImmutableArray<E> {
        let array = this.array
            .clone()
            :add(index, element)

        return new ImmutableArray(array, false)
    }

    public remove(E element) -> ImmutableArray<E> {
        let array = this.array
            .clone()
            :remove(element)

        return new ImmutableArray(array, false)
    }

    public remove(Int index) -> ImmutableArray<E> {
        let array = this.array
            .clone()
            :remove(index)

        return new ImmutableArray(array, false)
    }

    public toMutable() => array.clone()
}